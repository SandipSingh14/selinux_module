policy_module(exim, 1.0.3)

#########################
#	Declaration	#
#			#
#			#

require {
		type etc_aliases_t, random_device_t, urandom_device_t, user_devpts_t, var_log_t, var_spool_t, init_t, initrc_t, unconfined_t, smtp_port_t, etc_t, sysadm_devpts_t, resolv_conf_t, init_t;
}


# Define Role
attribute_role	exim_roles;

# Assign Role
roleattribute	system_r exim_roles;

# Define Type
type exim_t;
type exim_exec_t;

# Map application_domain with type
application_domain(exim_t, exim_exec_t)

# Assign role with type
role exim_roles types exim_t;

# Rum in Permissive mode
#permissive exim_t;

# Log type
type exim_log_t;
logging_log_file(exim_log_t)

# Systemd type
type exim_unit_file_t;
systemd_unit_file(exim_unit_file_t)
# Port type
type exim_port_t;
corenet_port(exim_port_t)

type exim_spool_t, file_type;

########################################
##
## exim local policy
##
#


allow exim_t self:capability { setgid setuid sys_chroot dac_read_search dac_override };
allow exim_t self:process { fork setrlimit signal_perms };

allow exim_t self:fifo_file manage_fifo_file_perms;
#allow exim_t self:unix_stream_socket create_stream_socket_perms;
# Use the network.
allow exim_t self:unix_stream_socket { connect create };

#  nsswitch.conf

# Bind to the SMTP port.
#allow exim_t smtp_port_t:tcp_socket name_bind;
allow exim_t exim_port_t:tcp_socket name_bind;
#type_transition init_t exim_port_t:process exim_t;


# Allow denied audit
allow exim_t etc_aliases_t:file read; 
allow exim_t random_device_t:chr_file read;
allow exim_t urandom_device_t:chr_file read;
allow exim_t user_devpts_t:chr_file { read write };
allow exim_t var_log_t:dir write;
allow exim_t var_log_t:file open;
allow exim_t var_spool_t:dir write;



domain_use_interactive_fds(exim_t)

files_read_etc_files(exim_t)

auth_use_nsswitch(exim_t)

logging_send_syslog_msg(exim_t)

miscfiles_read_localization(exim_t)

sysnet_dns_name_resolve(exim_t)


optional_policy(`
        gen_require(`
                type unconfined_t;
                role unconfined_r;
        ')

        exim_run(unconfined_t, unconfined_r)
')





